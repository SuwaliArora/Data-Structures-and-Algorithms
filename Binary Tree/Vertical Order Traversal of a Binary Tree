/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        vector<vector<int>> ans;
       
        map<int, map<int, multiset<int>>> nodes;
        queue<pair<TreeNode*, pair<int,int>>> q;
        
        if(root==NULL) return ans;
        
        q.push(make_pair(root, make_pair(0,0))); //insert root in the queue
        
        while(!q.empty()){
            pair<TreeNode*, pair<int,int>> temp = q.front();
            q.pop();
            TreeNode* frontnode = temp.first;
            int hd = temp.second.first; // find horizaontal distance
            int lvl= temp.second.second; // find vertical distance
            
            // create entry for every node in map
            nodes[hd][lvl].insert(frontnode->val);
            
            if(frontnode->left){
                q.push(make_pair(frontnode->left, make_pair(hd-1,lvl+1)));
            }
            if(frontnode->right){
                q.push(make_pair(frontnode->right, make_pair(hd+1,lvl+1)));
            }
        }
        for(auto i:nodes){
             vector<int> temp;
            for(auto y: i.second){
                temp.insert(temp.end(), y.second.begin(), y.second.end());
            
            }
            ans.push_back(temp);
        }
        return ans;
    }
};
